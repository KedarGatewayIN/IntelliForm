Project Title: "IntelliForm" - A Next-Generation Interactive & Conversational Form Builder
1. Project Overview & Vision
I want to build a sophisticated, user-centric, and highly interactive web application called "IntelliForm." The primary goal of this platform is to be a market-leading form builder that allows users to create any type of form with unparalleled customization options.

The key differentiator for IntelliForm will be its unique user experience, which moves away from traditional, static forms. Instead, it will feature a "one-question-at-a-time" stepper interface that focuses user attention. The standout feature will be the integration of a powerful, context-aware conversational AI within specific form fields to provide real-time, interactive support and analysis, transforming data collection into a dynamic conversation.

Core Philosophy:

User Focus: The design must be clean, intuitive, and centered on making the form-filling experience engaging and efficient.

Builder Power: The form creation tool must be robust, flexible, and competitive with leading form builders in the market (e.g., Typeform, Jotform). Do not sacrifice core form-building features for the AI component.

Innovation: The conversational AI is a powerful add-on, not the entire product. It should feel like a "superpower" for specific fields within an already excellent form builder.

2. Core Feature: The Form Builder Engine
This is the foundation of the application. It needs to be comprehensive and highly customizable.

A. Form Creation Interface (The "Builder"):

Drag-and-Drop Interface: A visual, intuitive interface where users can drag different field types onto a canvas to build their form.

Real-time Preview: Show a live, interactive preview of what the end-user will see as the form is being built.

B. Supported Form Fields (Must be comprehensive):

Standard Inputs: Text (Single Line), Text Area (Multi-line), Number, Email, Password, URL.

Choice Inputs: Multiple Choice (Radio Buttons), Checkboxes, Dropdown Select.

Advanced Inputs: Date/Time Picker, File Upload, Rating (e.g., 1-5 stars), Slider (for ranges), Address Block.

Layout Elements: Section Breaks, Page Breaks, Static Text/HTML Block, Image/Video Embed.

C. Customization & Styling (Granular Control is Key):

Global Styling: Allow users to set a theme for the entire form: background color/image, font family, font size, font color, button styles (color, shape, hover effects), etc.

Per-Element Styling: Users must be able to override global styles for every single element. This includes colors, borders, padding, margins, and specific options for that field type (e.g., style of radio buttons).

Branding: Allow users to easily add their own logo.

D. Logic & Behavior:

Conditional Logic: Allow form creators to show/hide questions based on previous answers. (e.g., If user answers "Yes" to "Do you have a car?", then show the "What is your car model?" question).

Required Fields: Ability to mark any question as mandatory.

Validation: Built-in validation for fields like Email, URL, Number ranges.

3. Key Feature: Interactive Stepper UI/UX
This is the defining user experience for the person filling out the form.

One-Question-at-a-Time Layout: Design the form-filling experience to display only one question at a time. The question and its input field(s) should be the central focus, occupying a significant portion of the screen to minimize distractions.

Stepper Navigation:

Include a visual progress indicator (e.g., a stepper bar or numbered dots at the top/bottom) to show the user where they are in the form and how many steps are left.

Clear "Next" and "Previous" buttons for navigation.

Animated Transitions: Use smooth, subtle animations (e.g., fades, slides) when transitioning between questions to make the experience feel fluid and modern.

Responsive Design: The stepper interface must be fully responsive and work flawlessly on desktop, tablet, and mobile devices.

4. Advanced Feature: Conversational AI Fields
This is the "intelligent" part of IntelliForm.

A. Field-Specific AI Integration:

In the form builder, for Text Area fields, provide a checkbox option labeled "Enable Conversational AI."

When enabled, this specific Text Area will transform from a simple input box into an interactive chat-like interface for the end-user.

B. The Conversational AI Interaction Flow:

User Input: The user types their initial query into the field. For example, for a question like "What part of our onboarding process can be improved?", the user might type, "My laptop keeps crashing and I can't complete the setup."

API Call to LLM: The user's input is sent to a pre-trained LLM.

Context-Aware LLM Response: The LLM, which has been trained on my company's specific processes and solutions, provides a helpful, interactive response.

Example:

User: "My laptop keeps crashing."
AI Response: "Letâ€™s try to resolve this. Have you restarted the laptop? If yes, please describe the error message. If not, try restarting and let me know if it persists. You can also email software@company.com for direct support."

In-Field Display: This entire conversation (user query and AI response) happens within the space of that single form question. It should look and feel like a mini chat window.

Resolution and Continuation: The user can continue to interact with the AI. Once their immediate issue is addressed or they have the information they need, they can click the "Next" button to proceed to the next question in the form. The final state of the conversation in that field should be saved as the form's data.

C. Technical Stack & Implementation:

Middleware Framework: Use a framework like LangChain or a similar alternative. This is critical as it provides an abstraction layer, allowing me to easily switch between different LLM providers in the future without rewriting the core logic.

Initial LLM: We will start by using the Groq model. The application should be built with a clear and accessible configuration area where I can input my Groq API key.

API Integration: Ensure the frontend can securely and efficiently make API calls to the backend, which will then communicate with the LangChain/LLM service.

Use React for frontend, nodejs for backend and postgresql with prisma for database

5. Final Deliverables
A fully functional web application with user registration and login.

A dashboard where users can create new forms, view, manage, and delete existing forms.

A "Results" or "Submissions" view for each form, where the collected data (including the conversational AI logs) can be viewed and exported (e.g., to CSV).

A clean, well-documented codebase that is ready for future development.